class Board {
	
	field Array boardArray; // 0 vacant, 1 naught, 2 cross
	field int boardX,boardY,boardSize,thickness,cellSize;// 100,50,120(40 is cellsize!),4
	field int winThickness;
	
	// board status;
	field boolean isWin, isDraw;
	field int winMode; // 0 - row, 1-col, 2 - topdiag, 3 - bottom diag
	field int winRow,winCol;// winning row or column
	field int winPieceType; // 1 naught, 2 cross;
	
	
	constructor Board new(int x,int y) {		
		let boardX = x;
		let boardY = y;
		let boardSize = 120;
		let thickness = 4;
		let winThickness = 2;
		let cellSize = boardSize/3;
		
		// board status
		let isWin = false;
		let isDraw  = false;
		
		
		let boardArray = Array.new(9);
		do clearBoard();
		do drawBoardBorders();
		return this;
	}
	
	method void dispose() {
		do Memory.deAlloc(boardArray);
		return;
	}
	
	method void clearBoard() {
		var int i;
		while(i<9) {
			let boardArray[i] = 0;
			let i = i + 1;
		}
		return;
	}
	
	method int posToIndex(int row, int col) {
		return (row*3)+col;
	}
	
	method boolean isFree(int row, int col) {
		if(boardArray[posToIndex(row,col)]=0) {
			return true;
		}else {
			return false;
		}
	}
	
	method int rowToY(int r) {
		return boardY + (r*cellSize);
	}
	
	method int colToX(int c) {
		return boardX + (c*cellSize);
	}
	
	method void drawBoardBorders() {
		var int offset;
		let offset = thickness/2;
		
		// vertical lines
		do Screen.drawRectangle(boardX+cellSize-offset,boardY, boardX+cellSize+offset,boardY+boardSize);
		do Screen.drawRectangle(boardX+(2*cellSize)-offset,boardY, boardX+(2*cellSize)+offset,boardY+boardSize);
		
		
		// horizontal lines
		do Screen.drawRectangle(boardX,boardY+cellSize-offset, boardX+boardSize,boardY+cellSize+offset);
		do Screen.drawRectangle(boardX,boardY+(2*cellSize)-offset, boardX+boardSize,boardY+(2*cellSize)+offset);
		
		return;
	}
	
	method void drawRowWin(int r) {
		var int y,offset;
		let y = rowToY(r)+(cellSize/2); 
		let offset = winThickness/2;
		do Screen.drawRectangle(boardX, y-offset, boardX+boardSize,y+offset);
		return;
	}
	
	method void drawColWin(int c) {
		var int x,offset;
		let x = colToX(c)+(cellSize/2); 
		let offset = winThickness/2;
		do Screen.drawRectangle(x-offset,boardY, x+offset,boardY+boardSize);
		return;
	}
	
	method void drawTopDiagonalWin() {
		var int i,x,y;
		let x = boardX;
		let y = boardY;
		let i = winThickness-1;
		while(~(i<0)) {
			do Screen.drawLine(x+i,y,x+boardSize,y+boardSize-i);
			do Screen.drawLine(x,y+i,x+boardSize-i,y+boardSize);
			
			let i = i-1;
		}
		return;
	}
	
	method void drawBottomDiagonalWin() {
		var int i,x,y;
		let x = boardX;
		let y = boardY;
		let i = winThickness-1;
		while(~(i<0)) {
			do Screen.drawLine(x,y+boardSize-i,x+boardSize-i,y);
			do Screen.drawLine(x+i,y+boardSize,x+boardSize,y+i);
			
			let i = i-1;
		}
		return;
	}
	
	
	method void drawWin() {
		if(winMode=0) {
			do drawRowWin(winRow);
		}
		if(winMode=1) {
			do drawColWin(winCol);
		}
		if(winMode=2) {
			do drawTopDiagonalWin();
		}
		if(winMode =3) {
			do drawBottomDiagonalWin();
		}
		return;
	}
	
	method boolean isWin() {
		return isWin;
	}
	
	method boolean isDraw() {
		return isDraw;
	}
	
	
	method void evaluateBoard() {
		var int r,c,b1,b2,b3;
		let r = 0;
		let c = 0;
		let isWin = false;
		let isDraw = false;
		
		while(r<3) {
			let b1 = boardArray[posToIndex(r,0)];
			let b2 = boardArray[posToIndex(r,1)];
			let b3 = boardArray[posToIndex(r,2)];
			if((b1=b2) & (b2=b3) & (b1>0)) {
				let isWin = true;
				let winMode = 0;
				let winRow = r;
				let winPieceType = b1;
				return;
			}
			let r = r+1;
		}
		while(c<3) {
			let b1 = boardArray[posToIndex(0,c)];
			let b2 = boardArray[posToIndex(1,c)];
			let b3 = boardArray[posToIndex(2,c)];
			if((b1=b2) & (b2=b3)& (b1>0)) {
				let isWin = true;
				let winMode = 1;
				let winCol = c;
				let winPieceType = b1;
				return;
			}
			let c = c+1;
		}
		
		let b1 = boardArray[posToIndex(0,0)];
		let b2 = boardArray[posToIndex(1,1)];
		let b3 = boardArray[posToIndex(2,2)];
		if((b1=b2) & (b2=b3)& (b1>0)) {
			let isWin = true;
			let winMode = 2;
			let winPieceType = b1;
			return;
		}
		
		let b1 = boardArray[posToIndex(2,0)];
		let b2 = boardArray[posToIndex(1,1)];
		let b3 = boardArray[posToIndex(0,2)];
		if((b1=b2) & (b2=b3)& (b1>0)) {
			let isWin = true;
			let winMode = 3;
			let winPieceType = b1;
			return;
		}
		if(getFreeCellCount()=0) {
			let isDraw = true;
			return;
		}
		return ;
	}
	
	method boolean isOpen() {
		return ((~isWin) & (~isDraw));
	}
	
	
	method void drawMove(int row, int col,Piece p) {
		var int xl,yt;
		
		let xl = colToX(col) + ((cellSize-p.getWidth())/2);
		let yt = rowToY(row) + ((cellSize-p.getHeight())/2);
		do p.drawPiece(xl,yt);
	
		return;
	}
	
	method void makeMove(int row, int col, Piece p) {
		let boardArray[posToIndex(row,col)] = p.getType();
		do drawMove(row,col,p);
		return;
	}
	
	method void takeBackMove(int row, int col,Piece p) {
		let boardArray[posToIndex(row,col)] = 0;
		do Screen.setColor(false);
		do drawMove(row,col,p);
		do Screen.setColor(true);
		return;
	}
	
	
	method int getFreeCellCount() {
		var int i,total;
		let total = 0;
		while(i<9) {
			if(boardArray[i]=0) {
				let total = total+1;
			}
			let i = i + 1;
		}
		return total;
	}
	
	method Array getAvailableMoves() {
		var Array moves;
		var int r1,c1,counter;
		let r1 = 0;
		let c1 = 0;
		let moves = Array.new(getFreeCellCount()*2);
		let counter = 0;
		while(r1<3) {
			let c1 = 0;
			while(c1<3) {
				if(boardArray[posToIndex(r1,c1)]=0) {
					let moves[counter] = r1;
					let moves[counter+1] = c1;
					let counter = counter + 2;
				}
				let c1 = c1 + 1;
			}
			let r1 = r1 + 1;
		}
		return moves;
	
	}

}