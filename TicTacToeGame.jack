class TicTacToeGame {
	static Board board;
	static Piece nPiece,cPiece;
	static int callCounter;
	
	function void init() {
		// initializes all static values
		do InputUtil.init();
		
		let board = Board.new(200,60);
		let nPiece = Piece.new(1);
		let cPiece = Piece.new(2);
		
		
		// sets up game stuff
		do TicTacToeGame.initGame();
		return;
	}
	
	function void initGame() {
		return;
	}
	
	function void processBoard() {
		do board.evaluateBoard();
		if(board.isWin()) {
			do board.drawWin();
		}
		return;
	}
	
	function void startGame() {
		var int input;
		var Array playerMove,computerMove;
		
		do InputUtil.showMessage("Press enter to contine...");
		do TicTacToeGame.seedGame();
		
		
		while(true) {
			let input = InputUtil.readInput("Enter move (1 to 9 or 0 to quit):");
			let playerMove = TicTacToeGame.inputToMove(input);
			do board.makeMove(playerMove[0],playerMove[1],nPiece);
			do playerMove.dispose();
			do TicTacToeGame.processBoard();
			
			
			let computerMove = TicTacToeGame.getComputerMove();
			do board.makeMove(computerMove[0],computerMove[1],cPiece);
			do computerMove.dispose();

			do TicTacToeGame.processBoard();
			
			
			
			
		}
	
		return;
	}
	
	function Array getComputerMove() {
		return TicTacToeGame.getBestMove(cPiece,1);
	}
	
	
	/*
	function Array findWinOrDraw(Piece p) {
		var boolean found;
		var int moveCount,i;
		var Array moveList,bestMove;
		let bestMove = 0;
		let i = 0;
		let found = false;
		
		let moveCount = board.getFreeCellCount();
		let moveList = board.getAvailableMoves();
		
		while( (i < moveCount) & (~found)) {
			do board.makeMove(moveList[2*i],moveList[(2*i)+1],p);
			do board.evaluateBoard();
			
			if(board.isDraw() | board.isWin()) {
				let bestMove = Array.new(2);
				let bestMove[0] = moveList[2*i];
				let bestMove[1] = moveList[(2*i)+1];
				let found = true;
			}
			
			do board.takeBackMove(moveList[2*i],moveList[(2*i)+1],p);
			let i = i + 1;
		}
		do moveList.dispose();
		return bestMove;
		
	}*/
	

	
	function Array getBestMove(Piece p, int sign) {
		var int moveCount, currentScore,nextScore;
		var Array moveList, bestMove;
		
		let moveCount = board.getFreeCellCount();
		let moveList = board.getAvailableMoves();
		let i = 0;
		let currentScore = -10; // we always want to get a move!
		let bestMove = Array.new(3);
		while(i< moveCount) {
			do board.makeMove(moveList[2*i],moveList[(2*i)+1],p);
			let nextScore = TicTacToeGame.getMoveScore();
			if(nextScore>currentScore) {
				let currentScore = nextScore;
				let bestMove[0] = currentScore;
				let bestMove[1] = moveList[2*i];
				let bestMove[2] = moveList[(2*i)+1];
			}
			do board.takeBackMove(moveList[2*i],moveList[(2*i)+1],p);
		}
		return bestMove;
	}
	
	function int getMoveScore(int sign) {
		var Array otherMove;
		var int otherScore;
		do board.evaluateBoard();
		if(board.isDraw()) {
			return 0;
		}
		if(board.isWin()) {
			return 1;
		}
		let otherMove= TicTacToeGame.getBestMove(getOtherPiece(p),-1*sign);
		return (-1*sign*otherMove[0]);
		
	}
	
	
	
	
	function int getOtherPiece(Piece p) {
		if(p = nPiece) {
			return cPiece;
		}else {
			return nPiece;
		}
	}
	
	
	
	function Array randomMove() {
		var int v;
		var Array moves;
		while(true) {
			let v = Random.randRange(8)+1;
			let moves = TicTacToeGame.inputToMove(v);
			if(board.isFree(moves[0],moves[1])) {
				return moves;
			}
		}
		return moves;
		
	}
	
	function Array inputToMove(int input) {
		var Array moves;
		let moves = Array.new(2);
		let moves[0] = (input-1)/3 ; //row;
		let moves[1] = (input-1)-(3*moves[0]);
		return moves;
		
	}
	
	function void seedGame() {
		var int seedCounter;
		var boolean enterPressed;
		let enterPressed = false;
		let seedCounter = 1;
		while(~enterPressed) {
			if(Keyboard.keyPressed()=128) {
				let enterPressed = true;
			}
			let seedCounter = seedCounter+1;
			if(seedCounter > 25444) {
				let seedCounter = 1;
			}
		}
		do Random.setSeed(seedCounter);
		return;
	}
	
}